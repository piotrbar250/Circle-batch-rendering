I coding boid simulation in c++ using cuda a opengl.
Right now every fram i compute all stuff on gpu and then transfer translations array back to cpu and then i bind it to vbo and then i draw VAO
I want to use interop for translations transfer. 

Here is what i have so far:

at first I initalize on cpu my vao and vbos

circle = Circle();

        glGenBuffers(1, &instanceVBO);
        glBindBuffer(GL_ARRAY_BUFFER, instanceVBO);
        glBufferData(GL_ARRAY_BUFFER, boidsCount * sizeof(glm::vec2), &translations[0], GL_DYNAMIC_DRAW);
        glBindBuffer(GL_ARRAY_BUFFER, 0);

        glGenVertexArrays(1, &VAO);
        glBindVertexArray(VAO);

        glGenBuffers(1, &VBO);
        glBindBuffer(GL_ARRAY_BUFFER, VBO);
        glBufferData(GL_ARRAY_BUFFER, circle.vertices.size() * sizeof(float), circle.vertices.data(), GL_STATIC_DRAW);

        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), (void*)0);

        glEnableVertexAttribArray(1);
        glBindBuffer(GL_ARRAY_BUFFER, instanceVBO);
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 2*sizeof(float), (void*)0);
        glBindBuffer(GL_ARRAY_BUFFER, 0);
        glVertexAttribDivisor(1, 1);
        glBindBuffer(GL_ARRAY_BUFFER, VBO);

        glBindVertexArray(0);
 
 cudaMalloc((void **)&device_translations, boidsCount * sizeof(glm::vec2)); // initialization of translations array on gpu

 After every frame i do 
 cuda_functions::getDataFromGPU(boidsCount, device_translations, translations.data());
 where: 
    void getDataFromGPU(int boidsCount, glm::vec2 *device_translations, glm::vec2 *host_translations)
    {
        cudaMemcpy(host_translations, device_translations, boidsCount * sizeof(glm::vec2), cudaMemcpyDeviceToHost);
    }

On cpu i store translations in vector<vec2> translations;

Then i

glBindBuffer(GL_ARRAY_BUFFER, instanceVBO);
        glBufferSubData(GL_ARRAY_BUFFER,0, boidsCount * sizeof(glm::vec2), &translations[0]);
        glBindBuffer(GL_ARRAY_BUFFER, 0);

and finally
 glBindVertexArray(VAO);
        glDrawArraysInstanced(GL_TRIANGLE_FAN, 0, NUMBER_OF_SEGMENTS, boidsCount);
        glBindVertexArray(0);

