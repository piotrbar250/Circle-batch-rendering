    bool checkNeighbour(int gid, int neighIndex, vec2* positions)
    {
        if(gid == neighIndex)
            return false;
        if(fabs(glm::length(positions[gid] - positions[neighIndex])) <= PERCEPTION)
            return true;
        return false;
    }    
    
    vec2 alignmentForce(int gid, int boidsCount, vec2* positions, vec2* velocities)
    {
        // consider changing to int** neighsIndices very important
        // consider saving result in alignmentForce 
        vec2 target = vec2(0, 0);
        int neighsCount = 0;

        for(int i = 0; i < boidsCount; i++)
        {
            if(checkNeighbour(gid, i, positions))
            {
                target += velocities[i];
                neighsCount++;
            }
        }
        if (neighsCount > 0)
            target /= neighsCount;
        else
            target = velocities[gid];

        return steeringForce(target, velocities[gid]);
    }