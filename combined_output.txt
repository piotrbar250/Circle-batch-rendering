[100%] Built target app
nowy boid
malloc(): invalid size (unsorted)
Aborted (core dumped)
src/main.cpp

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <vector>
#include "global.hpp"
#include "Shader.h"
#include "BoidsRenderer.h"
#include "Boid.h"
#include "Flock.h"
using namespace std;

int main()
{

    // return 0;
    srand(time(NULL));
    GLFWwindow* window;
    if(!glfwInit())
    {
        return -1;
    }

    window = glfwCreateWindow(screenWidth, screenHeight, "Window!", NULL, NULL);

    glfwMakeContextCurrent(window);

    if(!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Cound't load opengl" << std::endl;
        glfwTerminate();
        return -1; 
    }

    Shader shader("../src/10.1.instancing.vs", "../src/10.1.instancing.fs");
    shader.use();
    shader.setVec3("u_Color", glm::vec3(1.0f, 1.0f, 1.0f));

    glm::mat4 projection = glm::ortho(0.0f, screenWidth, 0.0f, screenHeight); 
    glm::mat4 model = glm::mat4(1.0f);

    glm::mat4 mvp = projection * model;

    shader.setMat4("u_mvp", mvp);

    Flock flock(25);


    int boidsCount = 25;
    BoidsRenderer boidsRenderer(boidsCount, flock.translations);


    while(!glfwWindowShouldClose(window))
    {
        glfwPollEvents();

        flock.computeNextFrame();

        boidsRenderer.clear();

        boidsRenderer.update();

        boidsRenderer.draw();
        
        glfwSwapBuffers(window);
    }
    glfwTerminate();
    return 0;
}

src/Boid.h

#pragma once
#include <iostream>
#include <glm/glm.hpp>
#include "global.hpp"
using namespace std;
using namespace glm;

class Boid
{
public:
    glm::vec2 position;
    glm::vec2 acceleration;
    glm::vec2 velocity;
    glm::vec2 translation;

    static vec2 start;
    static float minSpeed;
    static float maxSpeed;

    Boid()
    {
        cout << "nowy boid" << endl;
        position = start;
        velocity = {randomFloat(), randomFloat()};
    }

    void adjustVelocity()
    {
        if(glm::length(velocity) > maxSpeed)
        {
            velocity = glm::normalize(velocity);
            velocity *= maxSpeed;
            return;
        }

        if(glm::length(velocity) < minSpeed)
        {
            velocity = glm::normalize(velocity);
            velocity *= minSpeed;
            return;
        }
    }

    void computeAcceleration()
    {
        float forceValue = 10.f;

        if(position.x < RADIUS)
        {
            acceleration += vec2(forceValue, 0);
        }
        if(position.x + RADIUS > screenWidth)
        {
            acceleration += vec2(-forceValue, 0);
        }
        if(position.y < RADIUS)
        {
            acceleration += vec2(0, forceValue);
        }
        if(position.y + RADIUS > screenHeight)
        {
            acceleration += vec2(0, -forceValue);
        }
    }   

    void computeVelocity()
    {
        velocity += acceleration;
    } 

    void computePosition()
    {
        position += velocity;
    }

    void computeNextFrame()
    {
        acceleration *= 0;
        computeAcceleration();
        computeVelocity();
        computePosition();
        translation = start - position;
    }
};

float Boid::maxSpeed = 5;
float Boid::minSpeed = 1;
vec2 Boid::start = vec2(500, 500);

src/Flock.h

#include <iostream>
#include <vector>
#include <glm/glm.hpp>
#include "global.hpp"
#include "Boid.h"
using namespace std;
using namespace glm;

class Flock
{
public:
    int boidsCount;
    vector<Boid> boids;
    vector<glm::vec2> translations;

    Flock(int boidsCount) : boidsCount(boidsCount)
    {
        boids.resize(boidsCount);
        translations.resize(boidsCount);
    }

    void computeNextFrame()
    {   
        int index = 0;
        for(auto& boid: boids)
        {
            boid.computeNextFrame();
            translations[index++] = boid.translation;
        }
    }
};

src/BoidsRenderer.h

#include <glad/glad.h>
#include <iostream>
#include <vector>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

using namespace std;
using namespace glm;

const float PI = 3.14159265359;

int randomInt() {
    return rand() % 15 - 5;
}

class Circle
{
public:
    int numOfSegments;
    float radius;
    float cx;
    float cy;

    vector<float> vertices;

    Circle(int numOfSegments = 50, float radius = 25, float cx = 100, float cy = 100)
        : numOfSegments(numOfSegments), radius(radius), cx(cx), cy(cy)
    {
        float offset = 2 * PI / float(numOfSegments);
        float angle = 0;

        for (int i = 0; i < numOfSegments; i++)
        {
            float px = radius * cos(angle) + cx;
            float py = radius * sin(angle) + cy;
            vertices.push_back(px);
            vertices.push_back(py);
            angle += offset;
        }
    }
};

class BoidsRenderer
{
public:
    unsigned int VAO;
    unsigned int VBO;
    unsigned int instanceVBO;

    int boidsCount;
    vector<glm::vec2>& translations;
    Circle circle;

    BoidsRenderer(int boidsCount, vector<glm::vec2>& translations) : boidsCount(boidsCount), translations(translations)
    {
        prepVertices();
    }

    void prepVertices()
    {
        circle = Circle();
        translations.resize(boidsCount);

        int index = 0;
        for (int y = 0; y < 5; y++)
        {
            for (int x = 0; x < 5; x++)
            {
                glm::vec2 translation;
                translation.x = x * 200;
                translation.y = y * 200;
                translations[index++] = translation;
            }
        }

        glGenBuffers(1, &instanceVBO);
        glBindBuffer(GL_ARRAY_BUFFER, instanceVBO);
        glBufferData(GL_ARRAY_BUFFER, boidsCount * sizeof(glm::vec2), &translations[0], GL_STATIC_DRAW);
        glBindBuffer(GL_ARRAY_BUFFER, 0);

        glGenVertexArrays(1, &VAO);
        glBindVertexArray(VAO);

        glGenBuffers(1, &VBO);
        glBindBuffer(GL_ARRAY_BUFFER, VBO);
        glBufferData(GL_ARRAY_BUFFER, circle.vertices.size() * sizeof(float), circle.vertices.data(), GL_DYNAMIC_DRAW);

        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), (void*)0);

        glEnableVertexAttribArray(1);
        glBindBuffer(GL_ARRAY_BUFFER, instanceVBO);
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 2*sizeof(float), (void*)0);
        glBindBuffer(GL_ARRAY_BUFFER, 0);
        glVertexAttribDivisor(1, 1);
        glBindBuffer(GL_ARRAY_BUFFER, VBO);
    }

    void update()
    {
        // for(int i = 0; i < boidsCount; i++)
        // {
        //     translations[i].x += randomInt();
        //     translations[i].y += randomInt();
        // }        
        
        glBindBuffer(GL_ARRAY_BUFFER, instanceVBO);
        glBufferSubData(GL_ARRAY_BUFFER,0, boidsCount * sizeof(glm::vec2), &translations[0]);
        glBindBuffer(GL_ARRAY_BUFFER, 0);
    }

    void draw()
    {
        glBindVertexArray(VAO);
        glDrawArraysInstanced(GL_TRIANGLE_FAN, 0, 50, boidsCount);
        glBindVertexArray(0);
    }

    void clear()
    {
        glClear(GL_COLOR_BUFFER_BIT);
    }
};

src/Shader.h

#ifndef SHADER_H
#define SHADER_H

#include <glad/glad.h>
#include <glm/glm.hpp>

#include <string>
#include <fstream>
#include <sstream>
#include <iostream>

class Shader
{
public:
    unsigned int ID;
    // constructor generates the shader on the fly
    // ------------------------------------------------------------------------
    Shader(const char* vertexPath, const char* fragmentPath, const char* geometryPath = nullptr)
    {
        // 1. retrieve the vertex/fragment source code from filePath
        std::string vertexCode;
        std::string fragmentCode;
        std::string geometryCode;
        std::ifstream vShaderFile;
        std::ifstream fShaderFile;
        std::ifstream gShaderFile;
        // ensure ifstream objects can throw exceptions:
        vShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);
        fShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);
        gShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);
        try 
        {
            // open files
            vShaderFile.open(vertexPath);
            fShaderFile.open(fragmentPath);
            std::stringstream vShaderStream, fShaderStream;
            // read file's buffer contents into streams
            vShaderStream << vShaderFile.rdbuf();
            fShaderStream << fShaderFile.rdbuf();		
            // close file handlers
            vShaderFile.close();
            fShaderFile.close();
            // convert stream into string
            vertexCode = vShaderStream.str();
            fragmentCode = fShaderStream.str();			
            // if geometry shader path is present, also load a geometry shader
            if(geometryPath != nullptr)
            {
                gShaderFile.open(geometryPath);
                std::stringstream gShaderStream;
                gShaderStream << gShaderFile.rdbuf();
                gShaderFile.close();
                geometryCode = gShaderStream.str();
            }
        }
        catch (std::ifstream::failure& e)
        {
            std::cout << "ERROR::SHADER::FILE_NOT_SUCCESSFULLY_READ: " << e.what() << std::endl;
        }
        const char* vShaderCode = vertexCode.c_str();
        const char * fShaderCode = fragmentCode.c_str();
        // 2. compile shaders
        unsigned int vertex, fragment;
        // vertex shader
        vertex = glCreateShader(GL_VERTEX_SHADER);
        glShaderSource(vertex, 1, &vShaderCode, NULL);
        glCompileShader(vertex);
        checkCompileErrors(vertex, "VERTEX");
        // fragment Shader
        fragment = glCreateShader(GL_FRAGMENT_SHADER);
        glShaderSource(fragment, 1, &fShaderCode, NULL);
        glCompileShader(fragment);
        checkCompileErrors(fragment, "FRAGMENT");
        // if geometry shader is given, compile geometry shader
        unsigned int geometry;
        if(geometryPath != nullptr)
        {
            const char * gShaderCode = geometryCode.c_str();
            geometry = glCreateShader(GL_GEOMETRY_SHADER);
            glShaderSource(geometry, 1, &gShaderCode, NULL);
            glCompileShader(geometry);
            checkCompileErrors(geometry, "GEOMETRY");
        }
        // shader Program
        ID = glCreateProgram();
        glAttachShader(ID, vertex);
        glAttachShader(ID, fragment);
        if(geometryPath != nullptr)
            glAttachShader(ID, geometry);
        glLinkProgram(ID);
        checkCompileErrors(ID, "PROGRAM");
        // delete the shaders as they're linked into our program now and no longer necessary
        glDeleteShader(vertex);
        glDeleteShader(fragment);
        if(geometryPath != nullptr)
            glDeleteShader(geometry);

    }
    // activate the shader
    // ------------------------------------------------------------------------
    void use() 
    { 
        glUseProgram(ID); 
    }
    // utility uniform functions
    // ------------------------------------------------------------------------
    void setBool(const std::string &name, bool value) const
    {         
        glUniform1i(glGetUniformLocation(ID, name.c_str()), (int)value); 
    }
    // ------------------------------------------------------------------------
    void setInt(const std::string &name, int value) const
    { 
        glUniform1i(glGetUniformLocation(ID, name.c_str()), value); 
    }
    // ------------------------------------------------------------------------
    void setFloat(const std::string &name, float value) const
    { 
        glUniform1f(glGetUniformLocation(ID, name.c_str()), value); 
    }
    // ------------------------------------------------------------------------
    void setVec2(const std::string &name, const glm::vec2 &value) const
    { 
        glUniform2fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]); 
    }
    void setVec2(const std::string &name, float x, float y) const
    { 
        glUniform2f(glGetUniformLocation(ID, name.c_str()), x, y); 
    }
    // ------------------------------------------------------------------------
    void setVec3(const std::string &name, const glm::vec3 &value) const
    { 
        glUniform3fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]); 
    }
    void setVec3(const std::string &name, float x, float y, float z) const
    { 
        glUniform3f(glGetUniformLocation(ID, name.c_str()), x, y, z); 
    }
    // ------------------------------------------------------------------------
    void setVec4(const std::string &name, const glm::vec4 &value) const
    { 
        glUniform4fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]); 
    }
    void setVec4(const std::string &name, float x, float y, float z, float w) 
    { 
        glUniform4f(glGetUniformLocation(ID, name.c_str()), x, y, z, w); 
    }
    // ------------------------------------------------------------------------
    void setMat2(const std::string &name, const glm::mat2 &mat) const
    {
        glUniformMatrix2fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
    }
    // ------------------------------------------------------------------------
    void setMat3(const std::string &name, const glm::mat3 &mat) const
    {
        glUniformMatrix3fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
    }
    // ------------------------------------------------------------------------
    void setMat4(const std::string &name, const glm::mat4 &mat) const
    {
        glUniformMatrix4fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
    }

private:
    // utility function for checking shader compilation/linking errors.
    // ------------------------------------------------------------------------
    void checkCompileErrors(GLuint shader, std::string type)
    {
        GLint success;
        GLchar infoLog[1024];
        if(type != "PROGRAM")
        {
            glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
            if(!success)
            {
                glGetShaderInfoLog(shader, 1024, NULL, infoLog);
                std::cout << "ERROR::SHADER_COMPILATION_ERROR of type: " << type << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
            }
        }
        else
        {
            glGetProgramiv(shader, GL_LINK_STATUS, &success);
            if(!success)
            {
                glGetProgramInfoLog(shader, 1024, NULL, infoLog);
                std::cout << "ERROR::PROGRAM_LINKING_ERROR of type: " << type << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
            }
        }
    }
};
#endif

src/global.hpp

#pragma once
#include <random>
#include <iostream>

const float screenWidth = 1000;
const float screenHeight = 1000;
const float RADIUS = 25;
float randomFloat() {
    std::random_device rd;  // Obtain a random number from hardware
    std::mt19937 eng(rd()); // Seed the generator
    std::uniform_real_distribution<> distr(-1, 1); // Define the range

    return distr(eng);
}

src/10.1.instancing.vs

#version 460 core
layout (location = 0) in vec2 position;
layout (location = 1) in vec2 translation;

uniform mat4 u_mvp;

void main()
{
    vec2 translatedPosition = position + translation;
    gl_Position = u_mvp * vec4(translatedPosition, 0.0, 1.0);
}


src/10.1.instancing.fs

#version 460 

out vec4 screenColor;

uniform vec3 u_Color;

void main()
{
    screenColor = vec4(u_Color, 1.0);
}


